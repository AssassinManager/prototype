<?php

require('messaging_notifier.inc');
require('messaging_config.inc');

require('messaging_recipients.inc');
require('messaging_rules.inc');
require('messaging_read.inc');


function messaging_rules_action_info() {
	return array(
		'am_notifier' =>_create_notifier_action(),
        'am_messages' =>_create_messages_action(),
		);
}

/*
 * Messaging Recipients Utilities
 */
function _recipients_for_msg($uids) {
  $recipients = array();
  foreach ($uids as $uid) {
    array_push($recipients, array('target_id' => $uid));
  }
  return $recipients;
}

/*
 * Send message API
 */
function messaging_send_message($subject, $body, $to) {

	$node = new StdClass();
    $node->type = 'message';

    node_object_prepare($node);
    unset($node->comment);
    unset($node->menu);

    $node->language = 'und';

    $node->title = $subject;
    $node->field_body['und'][0]['value'] = $body;
    $node->field_body['und'][0]['safe_value'] = "<p>" . $body ."<p>";

    $recipients = _recipients_for_msg($to);
    $node->field_recipients['und'] = $recipients;

    node_save($node);
}

function messaging_reply_message($msg_nid, $msg_body) {
    global $user;

    $comment = (object) array(
        'nid' => $msg_nid,
        'cid' => 0,
        'pid' => 0,
        'uid' => $user->uid,
        'mail' => '',
        'is_anonymous' => 0,
        'homepage' => '',
        'status' => COMMENT_PUBLISHED,
        'subject' => 'challenge',
        'language' => LANGUAGE_NONE,
        'comment_body' => array(
          LANGUAGE_NONE => array(
            0 => array (
              'value' => $msg_body,
              'format' => 'filtered_html'
            )
          )
        ),
    );

    comment_submit($comment);
    comment_save($comment);
}