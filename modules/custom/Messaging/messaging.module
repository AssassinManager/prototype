<?php

require('messaging_notifier.inc');
require('messaging_config.inc');

require('messaging_recipients.inc');
require('messaging_rule.inc');
require('messaging_read.inc');


function messaging_rules_action_info() {
	return array(
		'am_notifier' =>_create_notifier_action(),
		);
}

/*
 * Send message API
 */
function messaging_send_message($subject, $body, $to) {

    watchdog("test", "here");

	$node = new stdclass();
    $node->type = 'message';
    node_object_prepare($node);

    watchdog("test", "1");

    $node->language = 'und';

    $node->title = $subject;
    $node->field_body['und'][0]['value'] = $body;
    $node->field_body['und'][0]['safe_value'] = "<p>" . $body ."<p>";
    $node->field_body['und'][0]['format'] = 'filtered_html';

    watchdog("test", "2");

    require('messaging_tools.inc');
    $recipients = _recipients_for_msg($to);
    $node->field_recipients['und'] = $to;

    watchdog("test", "3");

    node_save($node);
}
function messaging_reply_to_message($msg_nid, $msg_body) {
    global $user;

    $comment = (object) array(
        'nid' => $msg_nid,
        'cid' => 0,
        'pid' => 0,
        'uid' => $user->uid,
        'mail' => '',
        'is_anonymous' => 0,
        'homepage' => '',
        'status' => COMMENT_PUBLISHED,
        'subject' => 'challenge',
        'language' => LANGUAGE_NONE,
        'comment_body' => array(
          LANGUAGE_NONE => array(
            0 => array (
              'value' => $msg_body,
              'format' => 'filtered_html'
            )
          )
        ),
    );

    comment_submit($comment);
    comment_save($comment);
}

function messaging_deny_kill($assassin, $target) {
    $msg_nid = _messaging_get_msg_between($assassin, $target);
    if ($msg_nid == null) return;

    module_load_include('module', 'am_tools', 'am_tools');
    $organizers = am_tools_organizer_uids();

    require('messaging_tools.inc');
    _add_recipients($msg_nid, $organizers);

    messaging_reply_to_message($msg_nid, "I did not!");
}
function messaging_problem_kill($assassin, $target) {
    $msg_nid = _messaging_get_msg_between($assassin, $target);
    if ($msg_nid == null) return;

    messaging_reply_to_message($msg_nid, "Could not find kill, contact technical support for help!");
}

/*
 * Messaging Utilities
 */
function _messaging_get_msg_between($author, $recipient) {

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'message')
            ->propertyCondition('status', 1)
            ->propertyCondition('uid', $author)
            ->fieldCondition('field_recipients', 'target_id', array($recipient));

    $msg_nid = $query->execute();

    if (count($msg_nid) < 1) return null;
    $msg_nid = array_keys($msg_nid['node']);
    return $msg_nid[0];
}