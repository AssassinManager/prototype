<?php

// implements hook_page_build()
function game_page_system_page_build(&$page) {
  if ($node = menu_get_object('node', 1)) {
    if ($node->type != 'game') return;

    $page['content']['game_system'] = create_content();
  }
}

// form creation
function create_content() {
    $content['players_table']       = create_table();
    $content['button_form']         = drupal_get_form('game_players_form');
    if(module_exists('code_gen')) {
        module_load_include('module', 'code_gen');
        $content['licenses_form']   = drupal_get_form('game_licenses_form');
    }
    if(module_exists('message_to_all')) {
        module_load_include('module', 'message_to_all');
        $content['message_form']    = drupal_get_form('message_players_form');
    }

    return $content;
}
function create_table() {
 
    $headers = array(
        'alive' => t('Alive'),
        'no_target' => t('No target'),
        'eliminated' => t('Eliminated'),
        'suspended' => t('Suspended'),
    );

    $users = get_users();
    $rows = create_table_content($users);

    $form['table'] = array(
        '#theme' => 'table',
        '#header' => $headers,
        '#rows' => $rows,
        '#empty' => t('No players yet'),
    );
    return $form;
}
function game_players_form() {
    $form['assign_targets'] = array(
        '#type' => 'button', 
        '#name' => 'assign_targets',
        '#value' => t('Assign all targets'),
        '#button_type' => 'submit',
        '#executes_submit_callback' => true,
        '#submit' => array('assign_targets'),
    );

    return $form;
}

function game_players_form_form_validate(&$form, &$form_state) {
    if($form['assign_targets']) return;

    if($form_state['values']['subject_field'] == "" || strlen($form_state['values']['subject_field']) == 0) {
        form_set_error('subject_field', t('must enter subject'));
    }
}

// form content manipulation
function get_users() {
    $query = db_select('users', 'u')
            ->fields('u', array('uid'))
            ->condition('uid',array(0,1,2),'NOT IN')
            ->execute();

    $data = array();
    while($record = $query->fetchassoc()) {
        array_push($data, $record['uid']);
    }

    $users = user_load_multiple($data);

    return $users;
}
function create_table_content($users) {
    $cols['alive'] = array();
    $cols['no_target'] = array();
    $cols['eliminated'] = array();
    $cols['suspended'] = array();

    global $base_url;

    foreach($users as $user){

        // get the user's name
        $name = $user->field_first_name['und'][0]['value'] . ' ' . $user->field_last_name['und'][0]['value'];

        // get the user's profile url
        $url = $base_url . '/';
        if(variable_get('clean_url', 0) != 1) $url = $url . '?q=';
        $url = $url . 'user-' . $user->uid;
        $name_url = '<a href="' . $url . '">' . $name . '</a>';
        
        // user is dead
        if ($user->field_alive['und'][0]['value'] == 0) {
            array_push($cols['eliminated'], $name_url);
            continue;
        }

        // user is suspended
        if ($user->field_suspended['und'][0]['value'] == 1) {
            array_push($cols['suspended'], $name_url);
            continue;
        }

        // user has no target
        if (!isset($user->field_current_target['und']) || count($user->field_current_target['und']) == 0) {
            array_push($cols['no_target'], $name_url);
            continue;
        }

        // user is all good!
        array_push($cols['alive'], $name_url);
    }

    $max_rows =count($cols['alive']);

    if ($max_rows < count($cols['eliminated'])) $max_rows = count($cols['eliminated']);
    if ($max_rows < count($cols['suspended']))  $max_rows = count($cols['suspended']);
    if ($max_rows < count($cols['no_target']))  $max_rows = count($cols['no_target']);

    $must_balance = true;
    while ($must_balance) {
        if (count($cols['eliminated']) < $max_rows) array_push($cols['eliminated'], '');
        if (count($cols['suspended']) < $max_rows)  array_push($cols['suspended'], '');
        if (count($cols['no_target']) < $max_rows)  array_push($cols['no_target'], '');
        if (count($cols['alive']) < $max_rows)      array_push($cols['alive'], '');

        if (count($cols['eliminated']) == $max_rows &&
            count($cols['suspended']) == $max_rows  &&
            count($cols['no_target']) == $max_rows &&
            count($cols['alive']) == $max_rows) {
            $must_balance = false;
        }
    }

    $rows = array();
    for($counter=0; $counter<$max_rows; $counter++) {
        $new_row = array (  
                            'alive' => $cols['alive'][$counter],
                            'no_target' => $cols['no_target'][$counter],
                            'eliminated' => $cols['eliminated'][$counter],
                            'suspended' => $cols['suspended'][$counter],
                        );
        array_push($rows, $new_row);
    }

    return $rows;
}
function filter_suspended_users($all_users) {
	$filtered_users = $all_users;

    foreach($all_users as $uid => $user) {
        if($user->field_suspended['und'][0]['value'] == 1) {
            unset($filtered_users[$uid]);
        }
    }
	return $filtered_users;
}
function assign_targets(&$form, &$form_state) {

    $users = get_users();
	$users = filter_suspended_users($users);
    $users_targeted = array();
    $users_not_targeted = array();
	
    //find all targeted users
    foreach($users as $user) {
        if(!isset($user->field_current_target['und']) || count($user->field_current_target['und']) == 0) continue;

        if($user->field_alive['und'][0]['value'] == 0 && count($user->field_current_target['und']) == 1) {
            unset($user->field_current_target['und'][0]);
            continue;
        }

        array_push($users_targeted, $user->field_current_target['und'][0]['target_id']);
    }

    //find all untargeted users
    foreach($users as $user) {
        if(in_array($user->uid, $users_targeted)) continue;
        if($user->field_alive['und'][0]['value'] == 0) continue;

        array_push($users_not_targeted, $user->uid);
    }

    if (count($users_targeted) == 0 && count($users_not_targeted) <= 1) {
        $full_user = user_load($users_not_targeted[0]);
        $name = $full_user->field_first_name['und'][0]['value'] . ' ' . $full_user->field_last_name['und'][0]['value'];
        drupal_set_message(t('Only 1 player (' . $name . ') left alive!'), 'warning');
        return;
    }

    //assign targets
    foreach($users as $user) {

        //target already assigned, skip it
        if(isset($user->field_current_target['und']) && count($user->field_current_target['und']) == 1) continue;

        //player dead, skip it
        if($user->field_alive['und'][0]['value'] == 0) continue;

        //player has pending target, skip it
        if(isset($user->field_pending_target['und'])) continue;

        //if no more targets, pop the first of the targeted ones
        if (count($users_not_targeted) == 0) array_push($users_not_targeted, array_shift($users_targeted));

        $user->field_current_target['und'][0]['target_id'] = array_pop($users_not_targeted);

        //if user targets himself, change that
        if ($user->field_current_target['und'][0]['target_id'] == $user->uid) {
            //if no more targets, pop the first of the targeted ones
            if (count($users_not_targeted) == 0) array_push($users_not_targeted, array_shift($users_targeted));
            $user->field_current_target['und'][0]['target_id'] = array_pop($users_not_targeted);

            array_push($users_not_targeted, $user->uid);
        }

        //add targeted user to targeted list
        array_push($users_targeted, $user->field_current_target['und'][0]['target_id']);

        user_save($user);
    }
    drupal_set_message(t('all targets assigned'));
}