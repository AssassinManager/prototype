<?php

require('target_connectors.inc');
require('target_rules.inc');
require('target_tools.inc');
require('target_config.inc');
require('target_button.inc');


function target_rules_action_info() {
	return array(
		'am_ranking' =>_update_ranking_action(),
		'am_targeting' =>_update_target_action(),
		'am_targeting_s' =>_update_target_s_action(),
		);
}

/**
 * Main target experts
 */
function target_assign_targets() {
	module_load_include('module', 'am_tools', 'am_tools');

	// Get all the players
	$players = am_tools_players_uids();
	if (count($players) < 1) {
		drupal_set_message(variable_get('no_valid_players'), 'warning');
		return;
	}

	$players = am_tools_players_status($players);
	if (count($players) < 1) {
		drupal_set_message(variable_get('no_valid_players'), 'warning');
		return;
	}

	if (count($players) == 1) {
		$user = user_load($players[0]);
		drupal_set_message(variable_get('one_assassin_left') . ' (' . am_tools_user_name($user) . ')', 'warning');
		return;
	}

	$targets = $players;
	shuffle($players);

	$players = array_values(user_load_multiple($players));
	foreach ($players as $idx => $user) {
		if ($targets[$idx] != $user->uid) continue;
		$swap = $idx+1;
		if ($swap >= count($players)) $swap = 0;
		$uid_2 = $targets[$swap];
		$targets[$swap] = $user->uid;
		$targets[$idx] = $uid_2;
	}

	foreach ($players as $idx => $user) {
		$edit = array(
				  'field_current_target' => array(
				    'und' => array(
				      0 => array(
				        'target_id' => $targets[$idx],
				      ),
				    ),
				  ),
				);
		user_save($user, $edit);
	}

	drupal_set_message(variable_get('all_targets_assigned'), 'status');
}

function _target_update_target($kill) {
	$assassin = user_load($kill->field_assassin['und'][0]['target_id']);
	$target = user_load($kill->field_target['und'][0]['target_id']);

	// Give the assassin the old target's target
	$new_target = $target->field_current_target['und'][0]['target_id'];
	$assassin->field_current_target['und'][0]['target_id'] = $new_target;
	user_save($assassin);

	// Remove target's old target
	$target->field_current_target = array();
	$target->field_alive['und'][0]['value'] = 0;
	user_save($target);
}

function _target_update_target_s($user) {

	$target = $user->field_current_target['und'][0]['target_id'];
	$assassin_uid = _find_target_assassin($user->uid);
	if (count($assassin_uid) < 1) {
		drupal_set_message("Player was not targeted, something must have went wrong", "error");
		return;
	}
	$assassin = user_load($assassin_uid[0]);

	// Give the assassin the old target's target
	$assassin->field_current_target['und'][0]['target_id'] = $target;
	user_save($assassin);

	// Remove target's old target
	$user->field_current_target = array();
	user_save($user);
}

/**
 * Main ranking expert
 */
function target_update_rankings() {

  module_load_include('module', 'am_tools', 'am_tools');
  $player_uids = am_tools_players_uids();

  $query = db_select('node', 'n')
          ->fields('n', array('uid'))
          ->condition('type', 'kill')
          ->condition('uid', $player_uids, 'IN')
          ->groupBy('n.uid');
  $query->addExpression('COUNT(nid)', 'kill_count');
  $result = $query->execute();

  $usersKills = array();
  while($record = $result->fetchAssoc()) {
      $usersKills[$record['uid']] = $record["kill_count"];
  }

  if(count($usersKills) == 0) {
  	$counter = 1;
  	foreach ($player_uids as $uid) {
      $user = user_load($uid);
      $user->field_rank['und'][0]['value'] = $counter;
      user_save($user);
      $counter++;
  	}
  	return;
  }

  ksort($usersKills, SORT_NUMERIC);

  $counter = 0;
  foreach ($usersKills as $key => $value) {
      $counter++;

      $user = user_load($key);
      $user->field_rank['und'][0]['value'] = $counter;
      user_save($user);
      unset($user);
  }

  foreach ($player_uids as $value) {
      if (array_key_exists($value, $usersKills)) continue;

      $counter++;
      $user = user_load($value);
      $user->field_rank['und'][0]['value'] = $counter;
      user_save($user);
      unset($user);
  }
}