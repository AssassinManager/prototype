<?php

require('target_connectors.inc');
require('target_rules.inc');
require('target_tools.inc');
require('target_config.inc');
require('target_button.inc');


function target_rules_action_info() {
	return array(
		'am_ranking' =>_update_ranking_action(),
		'am_targeting' =>_update_targets_action(),
		);
}

/**
 * Main target expert
 */
function target_assign_targets() {

	module_load_include('module', 'am_tools', 'am_tools');

	// Get all the players
	$players = am_tools_players_uids();
	if (count($players) < 1) {
		drupal_set_message(variable_get('no_valid_users'), 'warning');
		return;
	}

	$players = am_tools_players_status($players);
	if (count($players) < 1) {
		drupal_set_message(variable_get('no_valid_players'), 'warning');
		return;
	}

	if (count($players) == 1) {
		$user = user_load($players[0]);
		drupal_set_message(variable_get('one_assassin_left') . ' (' . am_tools_user_name($user) . ')', 'warning');
		return;
	}

	$players = user_load_multiple($players);

	// Check that the players that already have targets have valid targets
	foreach ($players as $uid => $user) {
		if (count($user->field_current_target) < 1) continue;
		$target_id = $user->field_current_target['und'][0]['target_id'];
		if (_check_player_valid($target_id) && $target_id != $uid) continue;

		$user->field_current_target = array();
		user_save($user);
	}

	// Find those without targets
	$users_without_target = _users_without_target($players);

	if (count($users_without_target) < 1) {
		drupal_set_message(variable_get('targets_already_assigned'), 'status');
		return;
	}

	// Find those untargeted
	$users_targeted = _users_targeted($players);

	$users_not_targeted = array();
	foreach ($players as $uid => $user) {
		if (in_array($uid, array_keys($users_targeted))) continue;
		$users_not_targeted[$uid] = $user;
	}
	if (count($users_not_targeted) < 1) {
		drupal_set_message(variable_get('targets_already_assigned'), 'warning');
		return;
	}

	if (count($users_without_target) == 1 && count($users_not_targeted) ==1 &&
		key($users_without_target) == key($users_not_targeted)) {
		  drupal_set_message(variable_get('assassin_singled_out'), 'warning');
		  return;
	}

	// Assign targets
	$previous_target = 0;
	foreach ($users_without_target as $uid => $user) {

		if (count($users_not_targeted) < 1) {
		  drupal_set_message(variable_get('not_enough_targets'), 'warning');
		  return;
		}

		$target = array_pop($users_not_targeted);
		$user->field_current_target['und'][0]['target_id'] = $target->uid;

		//if user targets himself, change that
        if ($user->field_current_target['und'][0]['target_id'] == $user->uid) {
        	 //if no more targets, use the previous target and add this one back into the array
            if (count($users_not_targeted) == 0) 
            	$user->field_current_target['und'][0]['target_id'] = $previous_target;
            else {
            	$target = array_pop($users_not_targeted);
            	$user->field_current_target['und'][0]['target_id'] = $target->uid;
            }

            $users_not_targeted[$uid] = $user;
        }

		user_save($user);
		$previous_target = $target->uid;
	}

	drupal_set_message(variable_get('all_targets_assigned'), 'status');
}

/**
 * Main ranking expert
 */
function target_update_rankings() {

  module_load_include('module', 'am_tools', 'am_tools');
  $player_uids = am_tools_players_uids();

  $query = db_select('node', 'n')
          ->fields('n', array('uid'))
          ->condition('type', 'kill')
          ->condition('uid', $player_uids, 'IN')
          ->groupBy('n.uid');
  $query->addExpression('COUNT(nid)', 'kill_count');
  $result = $query->execute();

  $usersKills = array();
  while($record = $result->fetchAssoc()) {
      $usersKills[$record['uid']] = $record["kill_count"];
  }

  if(count($usersKills) == 0) {
  	$counter = 1;
  	foreach ($player_uids as $uid) {
      $user = user_load($uid);
      $user->field_rank['und'][0]['value'] = $counter;
      user_save($user);
      $counter++;
  	}
  	return;
  }

  ksort($usersKills, SORT_NUMERIC);

  $counter = 0;
  foreach ($usersKills as $key => $value) {
      $counter++;

      $user = user_load($key);
      $user->field_rank['und'][0]['value'] = $counter;
      user_save($user);
      unset($user);
  }

  foreach ($player_uids as $value) {
      if (array_key_exists($value, $usersKills)) continue;

      $counter++;
      $user = user_load($value);
      $user->field_rank['und'][0]['value'] = $counter;
      user_save($user);
      unset($user);
  }
}